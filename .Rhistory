#SPOTIFY_ID ve SPOTIFY_SECRET environment variable'larını ayarlamak için
Sys.setenv(SPOTIFY_ID = "4fcf533c49824903a183f37fae00b30a")
Sys.setenv(SPOTIFY_SECRET = "85452bb5a1bd4768b193d9441e461786")
#Ardından, fonksiyonu çağırabilirsiniz
library(httr)
spotify_token <- function() {
# Spotify API token alma URL
token_url <- "https://accounts.spotify.com/api/token"
# Spotify uygulama bilgileri environment variable'lardan alınıyor
client_id <- Sys.getenv("SPOTIFY_ID")
client_secret <- Sys.getenv("SPOTIFY_SECRET")
if (client_id == "" || client_secret == "") {
stop("SPOTIFY_ID ve SPOTIFY_SECRET environment variable'larını ayarlayın.")
}
# Token alma isteği için body
body <- list(
grant_type = "client_credentials",
client_id = client_id,
client_secret = client_secret
)
# Token alma isteği gönderme
response <- POST(
url = token_url,
body = body,
encode = "form",
add_headers("Content-Type" = "application/x-www-form-urlencoded")
)
# HTTP status code'u alma
status_code <- status_code(response)
# Token değerini alma
token <- content(response)$access_token
# Bearer token stringini oluşturma
bearer_token <- paste("Bearer", token)
# Sonuçları liste olarak döndürme
result <- list(
status_code = status_code,
token = bearer_token
)
return(result)
}
#Kullanım örneği
token_result <- spotify_token()
print(token_result)
spotify_search_artist <- function(artist_name) {
# Spotify API'ye erişim için gerekli token'ı al
token_result <- spotify_token()
# Token alma işlemi başarılı değilse hatayı döndür
if (token_result$status_code != 200) {
return(token_result)
}
# Token'ı alınan değeri kullan
access_token <- token_result$token
# Authorization başlığını doğru bir şekilde oluştur
headers <- c("Authorization" = access_token)
# Artist araması için endpoint ve parametreler
search_url <- "https://api.spotify.com/v1/search"
search_type <- "artist"
# GET isteği için parametreleri belirle
params <- list(q = artist_name, type = search_type)
# Artist araması yapmak için GET isteği gönder
response <- GET(search_url, add_headers(headers), query = params)
# HTTP status kodunu al
status_code <- status_code(response)
if (status_code == 200) {
# Response JSON içerisinden artistlerin isim ve ID bilgilerini çek
artist_data <- content(response)$artists
if (length(artist_data$items) > 0) {
artists_df <- data.frame(artist = sapply(artist_data$items, function(artist) artist$name),
id = sapply(artist_data$items, function(artist) artist$id))
# Sonuçları liste olarak döndür
result <- list(status_code = status_code, search_results = artists_df)
} else {
# Hata durumunda status code'u ve hata mesajını çıktıya ekleyerek sonuçları liste olarak döndür
error_message <- "No artists found."
result <- list(status_code = status_code, error = error_message)
}
# Sonuçları liste olarak döndür
result <- list(status_code = status_code, search_results = artists_df)
} else {
# Hata durumunda status code'u ve hata mesajını çıktıya ekleyerek sonuçları liste olarak döndür
error_message <- content(response)$error$message
result <- list(status_code = status_code, error = error_message)
}
return(result)
}
# token <- spotify_token()
# print(token)
artist <- spotify_search_artist("The Doors")
print(artist)
install.packages("testthat")
library(testthat)
current_dir <- getwd()
relative_path <- paste(current_dir, "/Labex2_Q1_210401017_EMREBARAN_ARCA.R", sep = "")
source(relative_path)
install.packages("testthat")
library(testthat)
current_dir <- getwd()
relative_path <- paste(current_dir, "/Labex2_Q1_210401085_Evren_Galip.R", sep = "")
source(relative_path)
test_that("spotify_token creates a global variable", {
# Fonksiyonu çağır
spotify_token()
# Global ortamda spotify_token adlı bir değişkenin olup olmadığını kontrol et
expect_true(exists("spotify_token", envir = .GlobalEnv),
info = "spotify_token variable should be created in the global environment.")
})
test_that("spotify_token is a function", {
# spotify_token adlı değişkenin bir fonksiyon olup olmadığını kontrol et
expect_true(is.function(spotify_token),
info = "spotify_token should be a function.")
})
test_that("spotify_token returns a list", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü değerin bir liste olup olmadığını kontrol et
expect_true(is.list(result),
info = "spotify_token should return a list.")
})
test_that("spotify_token returns a list with two elements", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin iki element içerip içermediğini kontrol et
expect_equal(length(result), 2,
info = "spotify_token should return a list with two elements.")
})
test_that("spotify_token returns a list with 'status_code' as the first element", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin ilk elementinin ismini kontrol et
expect_identical(names(result)[1], "status_code",
info = "The first element of the list should be named 'status_code'.")
})
test_that("spotify_token returns a list with 'status_code' as a numeric element", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin ilk elementinin class'ını kontrol et
expect_true(is.numeric(result$status_code),
info = "The 'status_code' element should be of class 'numeric'.")
})
test_that("spotify_token returns a list with 'status_code' equal to 200", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin 'status_code' adlı elementinin değerini kontrol et
expect_equal(result$status_code, 200,
info = "The 'status_code' element should be equal to 200.")
})
test_that("spotify_token returns a list with 'token' as the second element", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin ikinci elementinin ismini kontrol et
expect_identical(names(result)[2], "token",
info = "The second element of the list should be named 'token'.")
})
test_that("spotify_token returns a list with 'token' as a character element", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin ikinci elementinin class'ını kontrol et
expect_true(is.character(result$token),
info = "The 'token' element should be of class 'character'.")
})
test_that("spotify_token returns a list with 'token' starting with 'Bearer '", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin ikinci elementinin 'Bearer ' ile başlamasını kontrol et
expect_true(startsWith(result$token, 'Bearer '),
info = "The 'token' element should start with 'Bearer '.")
})
test_that("spotify_token returns a list with 'token' containing 122 letters", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin ikinci elementinin içinde 122 harf olup olmadığını kontrol et
expect_equal(nchar(result$token), 122,
info = "The 'token' element should contain 122 letters.")
})
install.packages("testthat")
install.packages("testthat")
library(testthat)
current_dir <- getwd()
relative_path <- paste(current_dir, "/Labex2_Q1_210401085_Evren_Galip.R", sep = "")
source(relative_path)
test_that("spotify_token creates a global variable", {
# Fonksiyonu çağır
spotify_token()
# Global ortamda spotify_token adlı bir değişkenin olup olmadığını kontrol et
expect_true(exists("spotify_token", envir = .GlobalEnv),
info = "spotify_token variable should be created in the global environment.")
})
test_that("spotify_token is a function", {
# spotify_token adlı değişkenin bir fonksiyon olup olmadığını kontrol et
expect_true(is.function(spotify_token),
info = "spotify_token should be a function.")
})
test_that("spotify_token returns a list", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü değerin bir liste olup olmadığını kontrol et
expect_true(is.list(result),
info = "spotify_token should return a list.")
})
test_that("spotify_token returns a list with two elements", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin iki element içerip içermediğini kontrol et
expect_equal(length(result), 2,
info = "spotify_token should return a list with two elements.")
})
test_that("spotify_token returns a list with 'status_code' as the first element", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin ilk elementinin ismini kontrol et
expect_identical(names(result)[1], "status_code",
info = "The first element of the list should be named 'status_code'.")
})
test_that("spotify_token returns a list with 'status_code' as a numeric element", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin ilk elementinin class'ını kontrol et
expect_true(is.numeric(result$status_code),
info = "The 'status_code' element should be of class 'numeric'.")
})
test_that("spotify_token returns a list with 'status_code' equal to 200", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin 'status_code' adlı elementinin değerini kontrol et
expect_equal(result$status_code, 200,
info = "The 'status_code' element should be equal to 200.")
})
test_that("spotify_token returns a list with 'token' as the second element", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin ikinci elementinin ismini kontrol et
expect_identical(names(result)[2], "token",
info = "The second element of the list should be named 'token'.")
})
test_that("spotify_token returns a list with 'token' as a character element", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin ikinci elementinin class'ını kontrol et
expect_true(is.character(result$token),
info = "The 'token' element should be of class 'character'.")
})
test_that("spotify_token returns a list with 'token' starting with 'Bearer '", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin ikinci elementinin 'Bearer ' ile başlamasını kontrol et
expect_true(startsWith(result$token, 'Bearer '),
info = "The 'token' element should start with 'Bearer '.")
})
test_that("spotify_token returns a list with 'token' containing 122 letters", {
# spotify_token fonksiyonunu çağır
result <- spotify_token()
# Fonksiyonun döndürdüğü listenin ikinci elementinin içinde 122 harf olup olmadığını kontrol et
expect_equal(nchar(result$token), 122,
info = "The 'token' element should contain 122 letters.")
})
install.packages("testthat")
library(testthat)
current_dir <- getwd()
relative_path <- paste(current_dir, "/Labex2_Q1_210401085_Evren_Galip.R", sep = "")
source(relative_path)
test_that("Global Workspace'te spotify_search_artist değişkeni var mı?", {
expect_true(exists("spotify_search_artist"))
})
test_that("spotify_search_artist değişkeninin tipi 'function' olmalı", {
expect_is(spotify_search_artist, "function")
})
test_that("spotify_search_artist() herhangi bir artist ismi ile çağrıldığında döndürdüğü çıktı bir liste olmalı", {
# spotify_search_artist fonksiyonunu çağır
result <- spotify_search_artist("arbitrary_artist_name")
# Dönen çıktının bir liste olup olmadığını kontrol et
expect_is(result, "list")
})
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin iki elementi olmalı", {
# spotify_search_artist fonksiyonunu çağır
result <- spotify_search_artist("arbitrary_artist_name")
# Dönen listenin iki element içerip içermediğini kontrol et
expect_length(result, 2)
})
install.packages("testthat")
library(testthat)
current_dir <- getwd()
relative_path <- paste(current_dir, "/Labex2_Q1_210401085_Evren_Galip.R", sep = "")
source(relative_path)
test_that("Global Workspace'te spotify_search_artist değişkeni var mı?", {
expect_true(exists("spotify_search_artist"))
})
install.packages("testthat")
library(testthat)
current_dir <- getwd()
relative_path <- paste(current_dir, "/Labex2_Q1_210401085_Evren_Galip.R", sep = "")
source(relative_path)
test_that("Global Workspace'te spotify_search_artist değişkeni var mı?", {
expect_true(exists("spotify_search_artist"))
})
install.packages("testthat")
install.packages("testthat")
library(testthat)
current_dir <- getwd()
relative_path <- paste(current_dir, "/Labex2_Q1_210401085_Evren_Galip.R", sep = "")
source(relative_path)
test_that("Global Workspace'te spotify_search_artist değişkeni var mı?", {
expect_true(exists("spotify_search_artist"))
})
install.packages("testthat")
library(testthat)
current_dir <- getwd()
relative_path <- paste(current_dir, "/Labex2_Q1_210401085_Evren_Galip.R", sep = "")
source(relative_path)
install.packages("testthat")
install.packages("testthat")
library(testthat)
current_dir <- getwd()
relative_path <- paste(current_dir, "/Labex2_Q1_210401085_Evren_Galip.R", sep = "")
source(relative_path)
test_that("Global Workspace'te spotify_search_artist değişkeni var mı?", {
expect_true(exists("spotify_search_artist"))
install.packages("testthat")
library(testthat)
current_dir <- getwd()
relative_path <- paste(current_dir, "/Labex2_Q1_210401085_Evren_Galip.R", sep = "")
source(relative_path)
test_that("Global Workspace'te spotify_search_artist değişkeni var mı?", {
expect_true(exists("spotify_search_artist"))
})
test_that("spotify_search_artist değişkeninin tipi 'function' olmalı", {
expect_is(spotify_search_artist, "function")
})
install.packages("testthat")
library(testthat)
current_dir <- getwd()
relative_path <- paste(current_dir, "/Labex2_Q1_210401085_Evren_Galip.R", sep = "")
source(relative_path)
test_that("Global Workspace'te spotify_search_artist değişkeni var mı?", {
expect_true(exists("spotify_search_artist"))
})
test_that("spotify_search_artist değişkeninin tipi 'function' olmalı", {
expect_is(spotify_search_artist, "function")
})
install.packages("testthat")
library(testthat)
current_dir <- getwd()
relative_path <- paste(current_dir, "/Labex2_Q1_210401085_Evren_Galip.R", sep = "")
source(relative_path)
test_that("Global Workspace'te spotify_search_artist değişkeni var mı?", {
expect_true(exists("spotify_search_artist"))
})
test_that("spotify_search_artist değişkeninin tipi 'function' olmalı", {
expect_is(spotify_search_artist, "function")
})
test_that("spotify_search_artist() herhangi bir artist ismi ile çağrıldığında döndürdüğü çıktı bir liste olmalı", {
# spotify_search_artist fonksiyonunu çağır
result <- spotify_search_artist("arbitrary_artist_name")
install.packages("testthat")
library(testthat)
current_dir <- getwd()
relative_path <- paste(current_dir, "/Labex2_Q1_210401085_Evren_Galip.R", sep = "")
source(relative_path)
test_that("Global Workspace'te spotify_search_artist değişkeni var mı?", {
expect_true(exists("spotify_search_artist"))
})
test_that("spotify_search_artist değişkeninin tipi 'function' olmalı", {
expect_is(spotify_search_artist, "function")
})
test_that("spotify_search_artist() herhangi bir artist ismi ile çağrıldığında döndürdüğü çıktı bir liste olmalı", {
# spotify_search_artist fonksiyonunu çağır
result <- spotify_search_artist("arbitrary_artist_name")
# Dönen çıktının bir liste olup olmadığını kontrol et
expect_is(result, "list")
})
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin iki elementi olmalı", {
# spotify_search_artist fonksiyonunu çağır
result <- spotify_search_artist("arbitrary_artist_name")
# Dönen listenin iki element içerip içermediğini kontrol et
expect_length(result, 2)
})
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin ismi status_code olmalı", {
# spotify_search_artist fonksiyonunu çağır
result <- spotify_search_artist("arbitrary_artist_name")
# Dönen listenin ilk elementinin isminin "status_code" olup olmadığını kontrol et
expect_identical(names(result)[1], "status_code")
})
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin class’ı numeric olmalı", {
# spotify_search_artist fonksiyonunu çağır
result <- spotify_search_artist("arbitrary_artist_name")
# Dönen listenin ilk elementinin class’ının numeric olup olmadığını kontrol et
expect_is(result$status_code, "integer")
})
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin status_code adlı elementinin değeri 200’e eşit olmalı", {
# spotify_search_artist fonksiyonunu çağır
result <- spotify_search_artist("arbitrary_artist_name")
# Dönen listenin status_code adlı elementinin değerinin 200'e eşit olup olmadığını kontrol et
expect_equal(result$status_code, 200)
})
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin ismi search_results olmalı", {
# spotify_search_artist fonksiyonunu çağır
result <- spotify_search_artist("arbitrary_artist_name")
# Dönen listenin ikinci elementinin adının "search_results" olup olmadığını kontrol et
expect_identical(names(result)[2], "search_results")
})
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin class’ı data.frame olmalı", {
# spotify_search_artist fonksiyonunu çağır
result <- spotify_search_artist("arbitrary_artist_name")
# Dönen listenin ikinci elementinin class’ının "data.frame" olup olmadığını kontrol et
expect_is(result$search_results, "data.frame")
})
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin iki sütun barındırmalı", {
# spotify_search_artist fonksiyonunu çağır
result <- spotify_search_artist("arbitrary_artist_name")
# Dönen listenin ikinci elementinin sütun sayısını kontrol et
expect_length(colnames(result$search_results), 2)
})
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin sütun isimleri c('artist', 'id') olmalı", {
# spotify_search_artist fonksiyonunu çağır
result <- spotify_search_artist("arbitrary_artist_name")
# Dönen listenin ikinci elementinin sütun isimlerini kontrol et
expect_identical(colnames(result$search_results), c("artist", "id"))
})
test_that("spotify_search_artist('The Doors') çağrıldığında döndürdüğü listenin ikinci elementinin birinci satırının 'id' adlı sütunu '22WZ7M8sxp5THdruNY3gXt' olmalı", {
# spotify_search_artist fonksiyonunu çağır
result <- spotify_search_artist("The Doors")
# Dönen listenin ikinci elementinin birinci satırının 'id' sütununun değerini kontrol et
expect_identical(result$search_results$id[1], "22WZ7M8sxp5THdruNY3gXt")
})
#SPOTIFY_ID ve SPOTIFY_SECRET environment variable'larını ayarlamak için
Sys.setenv(SPOTIFY_ID = "4fcf533c49824903a183f37fae00b30a")
Sys.setenv(SPOTIFY_SECRET = "85452bb5a1bd4768b193d9441e461786")
#Ardından, fonksiyonu çağırabilirsiniz
library(httr)
spotify_token <- function() {
# Spotify API token alma URL
token_url <- "https://accounts.spotify.com/api/token"
# Spotify uygulama bilgileri environment variable'lardan alınıyor
client_id <- Sys.getenv("SPOTIFY_ID")
client_secret <- Sys.getenv("SPOTIFY_SECRET")
if (client_id == "" || client_secret == "") {
stop("SPOTIFY_ID ve SPOTIFY_SECRET environment variable'larını ayarlayın.")
}
# Token alma isteği için body
body <- list(
grant_type = "client_credentials",
client_id = client_id,
client_secret = client_secret
)
# Token alma isteği gönderme
response <- POST(
url = token_url,
body = body,
encode = "form",
add_headers("Content-Type" = "application/x-www-form-urlencoded")
)
# HTTP status code'u alma
status_code <- status_code(response)
# Token değerini alma
token <- content(response)$access_token
# Bearer token stringini oluşturma
bearer_token <- paste("Bearer", token)
# Sonuçları liste olarak döndürme
result <- list(
status_code = status_code,
token = bearer_token
)
return(result)
}
#Kullanım örneği
token_result <- spotify_token()
print(token_result)
spotify_search_artist <- function(artist_name) {
# Spotify API'ye erişim için gerekli token'ı al
token_result <- spotify_token()
# Token alma işlemi başarılı değilse hatayı döndür
if (token_result$status_code != 200) {
return(token_result)
}
# Token'ı alınan değeri kullan
access_token <- token_result$token
# Authorization başlığını doğru bir şekilde oluştur
headers <- c("Authorization" = access_token)
# Artist araması için endpoint ve parametreler
search_url <- "https://api.spotify.com/v1/search"
search_type <- "artist"
# GET isteği için parametreleri belirle
params <- list(q = artist_name, type = search_type)
# Artist araması yapmak için GET isteği gönder
response <- GET(search_url, add_headers(headers), query = params)
# HTTP status kodunu al
status_code <- status_code(response)
if (status_code == 200) {
# Response JSON içerisinden artistlerin isim ve ID bilgilerini çek
artist_data <- content(response)$artists
if (length(artist_data$items) > 0) {
artists_df <- data.frame(artist = sapply(artist_data$items, function(artist) artist$name),
id = sapply(artist_data$items, function(artist) artist$id))
# Sonuçları liste olarak döndür
result <- list(status_code = status_code, search_results = artists_df)
} else {
# Hata durumunda status code'u ve hata mesajını çıktıya ekleyerek sonuçları liste olarak döndür
error_message <- "No artists found."
result <- list(status_code = status_code, error = error_message)
}
# Sonuçları liste olarak döndür
result <- list(status_code = status_code, search_results = artists_df)
} else {
# Hata durumunda status code'u ve hata mesajını çıktıya ekleyerek sonuçları liste olarak döndür
error_message <- content(response)$error$message
result <- list(status_code = status_code, error = error_message)
}
return(result)
}
# token <- spotify_token()
# print(token)
artist <- spotify_search_artist("The Doors")
print(artist)
